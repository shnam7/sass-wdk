//=========================================================
//
//  @package sass-wdk
//
//  @module mixins/unit
//  @description Unit manipulation functions
//
//=========================================================

@use "font";
@use "sass:meta";
@use "sass:math";

//--- internal functions ----
@function __default-font-size() {
    @if not meta.global-variable-exists('size', font) {
        @warn "[unit.scss]:font.$size is not defined. Using 16px as default.\a"
        +"To supress this warning, load font module first.\a";
        @return 16px;
    }

    @else {
        @return font.$size;
    }
}

//
//  Convert from px to rem for single primitive argument
//  @param {number} $value - Number in px unit
//  @param {number} $base - Base font size
//  @returns {number} Value in rem unit
//
@function _px2rem($value, $base) {
    @if unit($value) =='rem' { @return $value; }

    @if unit($value) !='px' {
        @warn "[unit.scss:_px2rem]: $value #{$value} is not in pixel unit.";
    }

    $value: math.div(strip-unit($value), strip-unit($base)) * 1rem;
    @if $value==0rem {
        $value: 0;
    }

    @return $value;
}

//
//  Convert from rem to px for single primitive argument
//  @param {number} $value - Number in rem unit
//  @param {number} $base - Base font size
//  @returns {number} Value in px unit
//
@function _rem2px($value, $base) {
    @if unit($value) =='px' { @return $value; }

    @if unit($value) !='rem' {
        @warn "[unit.scss:_rem2px]: $value #{$value} is not in rem unit.";
    }

    $value: strip-unit($value) * strip-unit($base) * 1px;
    @if $value==0px {
        $value: 0;
    }

    @return $value;
}

//--- end of internal functions ---


//
//  Remove the unit
//  @param {number} $num - Number to remove unit from
//  @returns {number} Unitless number
//
@function strip-unit($num) {
    @if type-of($num)=='number' {
        @return math.div($num, ($num * 0 + 1));
    }

    @return $num;
}

//
//  Convert px values to rem values (single or multi in list)
//  @param {number|List[number]} $value - Single number in px, or List of numbers in px
//  @param {number} $base - Base font size in px or percentage of global font size
//  @return {number|List[number]} Values in rem unit
//
@function rem($values, $base:__default-font-size()) {
    $rem-values: ();
    $count: length($values);

    @if unit($base)=='%' {
        $base: ($base / 100%) * __default-font-size();
    }

    @if $count==1 {
        @return _px2rem($values, $base);
    }

    @for $i from 1 through $count {
        $rem-values: append($rem-values, _px2rem(nth($values, $i), $base));
    }

    @return $rem-values;
}

//
//  Convert rem values to px values (single or multi in list)
//  @param {number|List[number]} $value - Single number in rem, or List of numbers in rem
//  @param {number} $base - Base font size in px or percentage of global font size
//  @return {number|List[number]} Values in px unit
//
@function px($values, $base:__default-font-size()) {
    $px-values: ();
    $count: length($values);

    @if unit($base)=='%' {
        $base: ($base / 100%) * __default-font-size();
    }

    @if $count==1 {
        @return _rem2px($values, $base);
    }

    @for $i from 1 through $count {
        $px-values: append($px-values, _rem2px(nth($values, $i), $base));
    }

    @return $px-values;
}
