//=========================================================
//
//  @package sass-wdk
//
//  @module ui/shape
//
//=========================================================
@use "../color";
@use "sass:math";

//
//  Creates a CSS triangle, which can be used for dropdown arrows, etc.
//  Use this mixin inside a `&::before` or `&::after` selector, to attach the triangle to an existing element.
//
//  @param {number} $triangle-size - Width of the triangle.
//  @param {Color} $triangle-color - Color of the triangle.
//  @param {string} $triangle-direction - Direction the triangle points. Can be `up`, `right`, `down`, or `left`.
//
//  @credit
//  https://github.com/zurb/foundation-sites/blob/master/scss/util/_mixins.scss
//
@mixin triangle($triangle-size,
    $triangle-color,
    $triangle-direction) {
    content: '';
    display: block;
    width: 0;
    height: 0;
    border: inset $triangle-size;

    @if ($triangle-direction==down) {
        border-color: $triangle-color transparent transparent;
        border-top-style: solid;
        border-bottom-width: 0;
    }

    @if ($triangle-direction==up) {
        border-color: transparent transparent $triangle-color;
        border-bottom-style: solid;
        border-top-width: 0;
    }

    @if ($triangle-direction==right) {
        border-color: transparent transparent transparent $triangle-color;
        border-left-style: solid;
        border-right-width: 0;
    }

    @if ($triangle-direction==left) {
        border-color: transparent $triangle-color transparent transparent;
        border-right-style: solid;
        border-left-width: 0;
    }
}

//
//  Creates a menu icon with a set of width, height, number of bars, and colors.
//  The mixin uses the height of the icon and the weight of the bars to determine spacing.
//
//  @param {Color} $color - Color to use for the icon.
//  @param {Color} [$color-hover=null] - Color to use when the icon is hovered over.
//  @param {Number} [$width:18px] - Width of the icon.
//  @param {Number} [$height:14px] - Height of the icon.
//  @param {Number} [$weight:2px] - Height of individual bars in the icon.
//  @param {Number} [$bars:3px] - Number of bars in the icon.
//
//  @credit
//  https://github.com/zurb/foundation-sites/blob/master/scss/util/_mixins.scss
//
@mixin hamburger($color: color.$text-white,
    $color-hover: null,
    $width: 18px,
    $height: 14px,
    $weight: 2px,
    $bars: 3) {
    $color-hover: if($color-hover, $color-hover, color.smart-scale($color, 15%));

    // box-shadow CSS output
    $shadow: ();
    $hover-shadow: ();

    // Spacing between bars is calculated based on the total height of the icon and the weight of each bar
    $spacing: math.floor(math.div(($height - ($weight * $bars)), ($bars - 1)));

    //Icon container
    position: relative;
    //display: inline-block;
    vertical-align: middle;
    cursor: pointer;
    width: $width;
    height: $height;

    // Icon bars
    &::after {
        content: '';
        position: absolute;
        display: block;
        width: 100%;
        height: $weight;
        background: $color;
        top: 0;
        left: 0;

        @for $i from 2 through $bars {
            $offset: ($weight + $spacing) * ($i - 1);
            $shadow: append($shadow, 0 $offset 0 $color, comma);
        }

        box-shadow: $shadow;
    }

    // Hover state
    @if $color-hover {

        // Generate CSS
        @for $i from 2 through $bars {
            $offset: ($weight + $spacing) * ($i - 1);
            $hover-shadow: append($hover-shadow, 0 $offset 0 $color-hover, comma);
        }

        &:hover::after {
            background: $color-hover;
            box-shadow: $hover-shadow;
        }
    }
}

//
//  Make circle
//  @param {number} $radius - Radius of the curcle
//  @param {Color} [$color=null] - Color of the circle
//
@mixin circle($radius, $color:null) {
    height: $radius;
    width: $radius;
    border-radius: 50%;

    @if $color {
        background: $color;
    }
}

@mixin pattern($color:reg.gsv('theme/color/fg'), $pattern-name:null) {
    @if $pattern-name == null {
    background-color: $color;
    background-image:
        repeating-linear-gradient(120deg, rgba(255, 255, 255, .1), rgba(255, 255, 255, .1) 1px,
            transparent 1px, transparent 60px),
        repeating-linear-gradient(60deg, rgba(255, 255, 255, .1), rgba(255, 255, 255, .1) 1px,
            transparent 1px, transparent 60px),
        linear-gradient(60deg, rgba(0, 0, 0, .1) 25%, transparent 25%, transparent 75%,
            rgba(0, 0, 0, .1) 75%, rgba(0, 0, 0, .1)),
        linear-gradient(120deg, rgba(0, 0, 0, .1) 25%, transparent 25%, transparent 75%,
            rgba(0, 0, 0, .1) 75%, rgba(0, 0, 0, .1));
    }
}
