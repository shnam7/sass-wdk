//=========================================================
//
//  @package sass-wdk
//
//  @module modules/mq
//  @description Media query service module
//
//=========================================================

@forward '../constants/mq.constants';
@use '../constants/mq.constants' as *;
@use '../util' as *;
@use 'sass:map';
@use 'sass:list';

//-----------------------------------------------------------------------------
//  Internals
//-----------------------------------------------------------------------------
//
//  Converts breakpoint list into mq-set (media query set)
//  @param  {Map}   [$breakpoints]  Array of breakpoints
//  @return {Map}   The media query string without the @media
//
//  Example #1
//    $breakpoints: (small: 300px)
//    @return: (computer: "(min-width:960px)")
//
//  Example #1
//    $breakpoints: (mobile:0, computer:960px)
//    @return: (
//      mobile:   "(max-width:959px)",
//      computer: "(min-width:960px)")
//
//  Example #3
//    $breakpoints: (small:0, medium: 768px, large: 960px)
//    @returns: (
//      small:   "(max-width:767px)",
//      medium:  "(min-width:768px)",
//      medium-only: "(min-width:768px) and (max-width:959px)",
//      medium-down: "(max-width:960px)",
//      large: "(min-width:960px)"
//    )
//
@function __mq-set-of($breakpoints) {
    $result: ();
    $keys: map.keys($breakpoints);
    $length: list.length($keys);

    @if $length>=2 {
        $min: map.get($breakpoints, list.nth($keys, 1));

        @if strip-unit($min) != 0 {
            @error 'First element of the breakpoint list should have zero value';
        }

        $name: list.nth($keys, 1);
        $max: map.get($breakpoints, list.nth($keys, 2));
        $result: ( $name: '(max-width:' + ( $max - 1,) + ')', );

        @for $i from 2 to $length {
            $name: list.nth($keys, $i);
            $min: $max;
            $max: map.get($breakpoints, list.nth($keys, $i + 1));
            $result: map.merge(
                $result,
                (
                    $name: '(min-width:' + $min + ')',
                )
            );
            $result: map.merge(
                $result,
                ($name + '-only': '(min-width:' + $min + ') and (max-width:'+ ($max - 1) + ')')
            );
            $result: map.merge($result, ($name + '-down': '(max-width:' + $max + ')'));
        }

        $name: list.nth($keys, $length);
        $max: map.get($breakpoints, list.nth($keys, $length));
        $result: map.merge(
            $result,
            (
                $name: '(min-width:' + $max + ')',
            )
        );
    } @else if $length==1 {
        $name: list.nth($keys, 1);
        $val: map.get($breakpoints, list.nth($keys, 1));

        @if $val>0 {
            $result: map.merge(
                $result,
                (
                    $name: '(min-width:' + $val + ')',
                )
            );
            //$result: map.merge($result, ($name+'-down': '(max-width:' + ($val - 1) + ')'));
        }
    }

    @return $result;
}

//
//  Checks if $name is in mq-set
//  @param {string} $name - Name of media query string
//  @returns {boolean} - true if $name is in mq-set
//
@function __mq-invalid($name) {
    @return not map.has-key($__mq-set, $name);
}

//--- internal variables
$__breakpoints-default: $w-breakpoints-basic !default;
$__mq-set: __mq-set-of($__breakpoints-default) !default;

//-----------------------------------------------------------------------------
//  Functions
//-----------------------------------------------------------------------------
//
//  Returns currently active mq-set
//
@function mq-current_set() {
    @return $__mq-set;
}

//
//  Returns the list of media query names of current mq-set
//
@function mq-query-names() {
    @return map.keys($__mq-set);
}

//-----------------------------------------------------------------------------
//  Mixin's
//-----------------------------------------------------------------------------
//
//  Init media query with breakpoint list
//    @param {Map}    $breakpoints  List of breakpoints
//
@mixin set-breakpoints($breakpoints: null) {
    $breakpoints: if($breakpoints==null, $__breakpoints-default, $breakpoints);
    $__mq-set: __mq-set-of($breakpoints) !global;
}

//
//  Select media state (Mobile first)
//  @param {string} $name - Media Query name
//  @param {string} [$media-type=null] - CSS media type (all, print, screen, speach)
//
//  Example:
//    $my-breakpoints: (
//         small:                  0,
//         medium:                 768px,
//         large:                  960px,
//         xlarge:                 1220px
//    )
//    @include w-media-init($my-breakpoints);
//    @include w-media(medium) {...} --> "(min-width:768px)"
//    @include w-media(medium-only) {...} --> "(min-width:768px) and (max-width:959px)"
//    @include w-media(medium-down) {...} --> "(max-width:960px)"
//
@mixin media($name, $media-type: null) {
    @if __mq-invalid($name) {
        @error '[_breakpoint.scss:w-media]: #{$name} is not in media-query list.';
        @error '[_breakpoint.scss:w-media]: mq-set: #{$__mq-set}';
    }

    $media-type: if($media-type, $media-type + ' and ', '');

    @media #{$media-type + map.get($__mq-set, $name)} {
        @content;
    }
}
