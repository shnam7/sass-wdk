//=========================================================
//
//  @package sass-wdk
//
//  @module svg
//  @description SVG manipulation functions
//
//  @credit https://codepen.io/jakob-e/pen/doMoML
//
//=========================================================

@use "../string";
@use "sass:math";

//
//  Convert svg file format string into css url image format(svg+xml)
//  @param {string} $svg - SVG css string
//  @param {Color} [$fill-to-replace=null] - Fill color to be replaced
//  @param {Color} [$new-fill=null] - New fill colore
//  @returns {striing} CSS svg data string
//
//  Examples:
//  $svg-image:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 300"><path fill="#804D35"...
//  svg-url($svg-image) --> url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 300...
//
@function svg-url($svg, $fill-to-replace:null, $new-fill:null) {
    // Add missing namespace
    @if not str-index($svg, xmlns) {
        $svg: string.replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
    }

    // replace fill color if new-fill is specified
    @if $new-fill {
        $svg: string.replace($svg, to-string($fill-to-replace), to-string($new-fill));
    }

    // Chunk up string in order to avoid "stack level too deep" error
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(math.div(str-length($svg), $slice));

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //
        //   Encode (may need a few extra replacements)
        //
        $chunk: string.replace($chunk, '"', '\'');
        $chunk: string.replace($chunk, '%', '%25');
        $chunk: string.replace($chunk, '&', '%26');
        $chunk: string.replace($chunk, '#', '%23');
        $chunk: string.replace($chunk, '{', '%7B');
        $chunk: string.replace($chunk, '}', '%7D');
        $chunk: string.replace($chunk, '<', '%3C');
        $chunk: string.replace($chunk, '>', '%3E');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}
