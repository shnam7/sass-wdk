//=========================================================
//
//  @package Sass-WDK
//  @module modules/mq
//
//  @description Media query
//
//=========================================================

@import "../functions/unit";
//-----------------------------------------------
//  internal functions
//-----------------------------------------------

//
//  Converts breakpoint list into mq-set (media query set)
//  @param  {Map}   [$breakpoints]  Array of breakpoints
//  @return {Map}   The media query string without the @media
//
//  Example #1
//    $breakpoints: (small: 300px)
//    @return: (computer: "(min-width:960px)")
//
//  Example #1
//    $breakpoints: (mobile:0, computer:960px)
//    @return: (
//      mobile:   "(max-width:959px)",
//      computer: "(min-width:960px)")
//
//  Example #3
//    $breakpoints: (small:0, medium: 768px, large: 960px)
//    @returns: (
//      small:   "(max-width:767px)",
//      medium:  "(min-width:768px)",
//      medium-only: "(min-width:768px) and (max-width:959px)",
//      medium-down: "(max-width:960px)",
//      large: "(min-width:960px)"
//    )
//
// @function __mq-set-of($breakpoints) {
@function __mq-set-of($breakpoints) {
    $result: ();
    $keys: map-keys($breakpoints);
    $length: length($keys);

    @if $length>=2 {
        $min: map-get($breakpoints, nth($keys, 1));

        @if strip-unit($min) !=0 {
            @error 'First element of the breakpoint list should have zero value';
        }

        $name: nth($keys, 1);
        $max: map-get($breakpoints, nth($keys, 2));
        $result: ($name: '(max-width:'+ ($max - 1) + ')');

        @for $i from 2 to $length {
            $name: nth($keys, $i);
            $min: $max;
            $max: map-get($breakpoints, nth($keys, $i+1));
            $result: map-merge($result, ($name: '(min-width:'+ $min + ')'));
            $result: map-merge($result, ($name+'-only': '(min-width:'+ $min + ') and (max-width:'+ ($max - 1) + ')'));
            $result: map-merge($result, ($name+'-down': '(max-width:'+ $max + ')'));
        }

        $name: nth($keys, $length);
        $max: map-get($breakpoints, nth($keys, $length));
        $result: map-merge($result, ($name: '(min-width:'+ $max + ')'));
    }

    @else if $length==1 {
        $name: nth($keys, 1);
        $val: map-get($breakpoints, nth($keys, 1));

        @if $val>0 {
            $result: map-merge($result, ($name: '(min-width:'+ $val + ')'));
            //$result: map-merge($result, ($name+'-down': '(max-width:' + ($val - 1) + ')'));
        }
    }

    @return $result;
}

//
//  Checks if $name is in mq-set
//  @param {string} $name - Name of media query string
//  @returns {boolean} - true if $name is in mq-set
//
@function __mq-invalid($name) {
    @return not map-has-key($w-mq-set, $name);
}

//-----------------------------------------------
//  data
//-----------------------------------------------
$w-breakpoints-foundation: (
  // screen based states (foundation-site compatible)
        mini:                   0,
        small:                  320px,    // foundation-site small    : 320~
        medium:                 640px,    // foundation-site medium   : 640~
        large:                  1024px,   // foundation-site large    : 1024~
        xlarge:                 1200px,   // foundation-site xlarge   : 1200~
        xxlarge:                1440px,   // foundation-site xxlarge  : 1440~
) !default;

$w-breakpoints-semantic-ui: (
  // device based states (semantic-ui compatible)
        mini:                   0,
        phone:                  320px,    // semantic-ui mobile   : 320px~ (20em~)
        tablet:                 768px,    // semantic-ui tablet   : 768px~ (48em~)
        computer:               992px,    // semantic-ui computer : 992px~ (62em~ )
        largeMonitor:           1200px,   // semantic-ui largeMonitor : 1200px~ (75em~ )
        wideMonitor:            1920px,   // semantic-ui wideMonitor  : 1920px~ (120em~ )
) !default;

$w-breakpoints-uikit: (
  // generic states (UIKit compatible)
        mini:                   0,         // mini: 0~479 (phone portrait)
        small:                  480px,     // uikit small(phone landscape):     480~
        medium:                 768px,     // uikit medium(tablet portrait):    768~
        large:                  960px,     // uikit large(desktop and tablet landscape):  960~
        xlarge:                 1220px,    // uikit large(large desktop):       1220~
) !default;

$w-breakpoints-bootstrap: (
  // generic states (Bootstrap compatible)
        xs:                     0,         // extra small:  0~575
        sm:                     576px,     // small:        480~
        md:                     768px,     // medium:       768~
        lg:                     992px,     // large:        992~
        xl:                     1200px,    // extra large:  1200~
) !default;

$w-breakpoints-uiframework: (
  // generic states (UI Framework compatible: https://codyhouse.co/ds/docs/framework/breakpoints)
        xxs:                    0,          // extra extra small: 0~511
        xs:                     32rem,      // extra small:  512~
        sm:                     48rem,      // small:        768~
        md:                     64rem,      // medium:       1024~
        lg:                     80rem,      // large:        1280~
        xl:                     90rem,      // extra large:  1440~
) !default;

$w-breakpoints-simple: (
        mobile:                 0,
        computer:               960px,
) !default;

$w-breakpoints-basic: (
        small:                  0,
        medium:                 768px,
        large:                  960px,
        xlarge:                 1220px
) !default;

$w-breakpoints-default: $w-breakpoints-basic !default;

$w-mq-set: __mq-set-of($w-breakpoints-default) !default;


//-----------------------------------------------
//  functions
//-----------------------------------------------

//
//  Returns currently active mq-set
//
@function w-media-query-list() {
    @return $w-mq-set;
}

//
//  Returns the list of media query names of current mq-set
//
@function w-media-query-names() {
    @return map-keys($w-mq-set);
}



//-----------------------------------------------
//  mixin's
//-----------------------------------------------

//
//  Init media query with breakpoint list
//    @param {Map}    $breakpoints  List of breakpoints
//
@mixin w-media-set-breakpoints($breakpoints: null) {
    $breakpoints: if($breakpoints==null, $w-breakpoints-default, $breakpoints);
    $w-mq-set: __mq-set-of($breakpoints) !global;
}

//
//  Select media state (Mobile first)
//  @param {string} $name - Media Query name
//  @param {string} [$media-type=null] - CSS media type (all, print, screen, speach)
//
//  Example:
//    $my-breakpoints: (
//         small:                  0,
//         medium:                 768px,
//         large:                  960px,
//         xlarge:                 1220px
//    )
//    @include w-media-init($my-breakpoints);
//    @include w-media(medium) {...} --> "(min-width:768px)"
//    @include w-media(medium-only) {...} --> "(min-width:768px) and (max-width:959px)"
//    @include w-media(medium-down) {...} --> "(max-width:960px)"
//
@mixin w-media($name, $media-type:null) {
    @if __mq-invalid($name) {
        @error '[_breakpoint.scss:w-media]: #{$name} is not in media-query list.';
        @error '[_breakpoint.scss:w-media]: mq-set: #{$w-mq-set}';
    }

    $media-type: if($media-type, $media-type + " and ", "");

    @media #{$media-type + map-get($w-mq-set, $name)} {
        @content;
    }
}
