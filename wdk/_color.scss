//=========================================================
//
//  @package sass-wdk
//
//  @module color
//  @description Color manipulation module
//
//=========================================================

@forward "constants/color";
@forward "sass:color";

@use "unit";

//
//  Calculate YIQ value: https://24ways.org/2010/calculating-color-contrast
//  @param {Color} $color - Color to be calculated (typically background color)
//  @returns {number} normalized YIQ value (0.0 ~ 1.0)
//
@function yiq($color) {
    $r: red($color);
    $g: green($color);
    $b: blue($color);
    @return (($r*299) + ($g*587) + ($b*114))/(256*1000);
}


//
//  Select $black or $white depending on the yiq value of the $color to have highest contrast.
//  @param {Color} $color - Color to be compared (typically background color)
//  @param {Number} [$threshold=0.6] - Threshold for yiq value to determine $black and $white
//  @param {Color} [$black=#444] - Color code for black
//  @param {Color} [$white=#EEE] - Color code for white
//  @returns {Color} $black or $white which has higher contrast with $color
//
@function yiq-color($color, $threshold:0.6, $black:#444, $white:#EEE) {
    @return if(yiq($color) >= $threshold, $black, $white);
}

//
//  Mix a color with white
//  @param {Color} $color - Color to be mixed
//  @param {Percent} [$percent=5%] - Percentage of white to be mixed
//
@function tint($color, $percent:5%) {
    @return mix(#fff, $color, $percent);
}

//  Mix a color with black
//  @param {Color} $color - Color to be mixed
//  @param {Percent} [$percent=5%] - Percentage of black to be mixed
//
@function shade($color, $percent:5%) {
    @return mix(#000, $color, $percent);
}

//
//  Returns gray scale color
//  @param {Percent|number} $percent - Gray scale level from black
//  @param {Percent} [$alpha=null] - Alpha value
//  @returns {Color} Gray scale color
//  @notes gray(40%) === gray(40)
//
@function gray($percent, $alpha:null) {
    $percent: unit.strip-unit($percent) * 1%;
    $val: lighten(#000, $percent);
    @return if($alpha, rgba($val, $alpha), $val);
}

//
//  Source: foundation-site (http://foundation.zurb.com/)
//  Scales a color to be lighter if it's light, or darker if it's dark.
//  Use this function to tint a color appropriate to its lightness.
//  @param {Color} $color - Color to scale.
//  @param {Percentage} [$scale=5%] - Amount to scale up or down.
//  @param {Percentage} [$threshold=40%] - Threshold of lightness to check against.
//  @returns {Color} A scaled color.
//
@function smart-scale($color, $scale:5%, $threshold:40%) {
    @if lightness($color)>$threshold {
        $scale: -$scale;
    }

    @return scale-color($color, $lightness: $scale);
}

//
//  Make linear gradient with $color in the center of gradient
//  @param {Color} $color = Base color
//  @param {Percent} [$gradient-level=10%] - Amount of the gradient
//  @param {string} [$direction=bottom] - Direction of the gradient. See CSS linear-gradient() docs
//
@function gradient($color, $gradient-level:10%, $direction:bottom) {
    @if $color==transparent or strip-unit($gradient-level)==0 {
        @return $color;
    }

    @return linear-gradient(to $direction,
        tint($color, $gradient-level/2), shade($color, $gradient-level/2));
}
