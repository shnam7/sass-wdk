/*
 *  @package sass-wdk
 *
 *  @module color
 *  @description color manipulation module
 *
 */

@forward 'constants/color.constants';
@forward 'sass:color';

@use 'constants/color.constants' as *;
@use 'util' as *;
@use 'sass:math';
@use 'sass:color';

//-----------------------------------------------------------------------------
//  Functions
//-----------------------------------------------------------------------------
/**
 *  Calculate YIQ value: https://24ways.org/2010/calculating-color-contrast
 *  @param {color} $color - Color to be calculated (typically background color)
 *  @returns {number} Normalized YIQ value (0.0 ~ 1.0)
 */
@function yiq($color) {
    $r: red($color);
    $g: green($color);
    $b: blue($color);
    @return math.div((($r * 299) + ($g * 587) + ($b * 114)), (256 * 1000));
}

/**
 *  Select $black or $white depending on the yiq value of the $color to have highest contrast.
 *  @param {color} $color - Color to be compared (typically background color)
 *  @param {number} [$threshold=0.6] - Threshold for yiq value to determine $black and $white
 *  @param {color} [$black=#444] - Color code for black
 *  @param {color} [$white=#EEE] - Color code for white
 *  @returns {color} $black or $white which has higher contrast with $color
 */
@function yiq-color($color, $threshold: 0.6, $black: #444, $white: #eee) {
    @return if(yiq($color) >= $threshold, $black, $white);
}

/**
 *  Mix a color with white
 *  @param {color} $color - Color to be mixed
 *  @param {percent} [$percent=5%] - Percentage of white to be mixed
 */
@function tint($color, $percent: 5%) {
    $percent: strip-unit($percent) * 1%;
    @return color.mix(#fff, $color, $percent);
}

/**
 *  Mix a color with black
 *  @param {color} $color - Color to be mixed
 *  @param {percent} [$percent=5%] - percentage of black to be mixed
 */
@function shade($color, $percent: 5%) {
    $percent: strip-unit($percent) * 1%;
    @return color.mix(#000, $color, $percent);
}

/**
 *  Gray scale color
 *  @param {percent} $percent - Gray scale level from black (0~100)
 *  @param {number} [$alpha=null] - Alpha value (0 ~ 1)
 *  @returns {color} Gray scale color
 */
@function gray($percent, $alpha: null) {
    $percent: strip-unit($percent) * 1%;
    $val: color.scale(#000, $lightness: $percent);
    @return if($alpha, rgba($val, $alpha), $val);
}

/**
 *  Scales a color to be lighter if it's light, or darker if it's dark.
 *  Use this function to tint a color appropriate to its lightness.
 *  @param {color} $color - color to scale.
 *  @param {percent} [$scale=5%] - Amount to scale up or down.
 *  @param {percent} [$threshold=40%] - Threshold of lightness to check against.
 *  @returns {color} A scaled color.
 *  @notes Source from foundation-site (http://foundation.zurb.com/)
 */
@function smart-scale($color, $scale: 5%, $threshold: 40%) {
    @if color.lightness($color) > $threshold {
        $scale: -$scale;
    }
    @return color.scale($color, $lightness: $scale);
}

/**
 *  Make linear gradient with $color in the center of gradient.
 *  @param {color} $color = Base color
 *  @param {percent} [$gradient-level=10%] - Amount of the gradient
 *  @param {string} [$direction=bottom] - Direction of the gradient. to or bottom. See CSS linear-gradient() docs.
 *  @return CSS linear-greant
 */
@function gradient($color, $gradient-level: 10%, $direction: bottom) {
    @if $color==transparent or strip-unit($gradient-level) ==0 {
        @return $color;
    }
    @return linear-gradient(
        to $direction,
        tint($color, math.div($gradient-level, 2)),
        shade($color, math.div($gradient-level, 2))
    );
}
