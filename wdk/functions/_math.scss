//=========================================================
//
//  @package Sass-WDK
//  @module functions/math
//
//  @description Math functions
//
//  @credit:
//    https://css-tricks.com/snippets/sass/power-function/
//
//=========================================================

//
//  Calculate Base to the exponent power
//  @param {number} $base - Base number
//  @param {number} $exponent - Exponent number
//  @returns {number} $base to the $exponent
//
@function pow($base, $exponent) {
  @if (round($exponent) != $exponent) {
    @return exp($exponent * ln($base));
  }
  $value: 1;
  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $base;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $base;
    }
  }
  @return $value;
}

//
//  Calculate Calculate factorial
//  @param {number} $value
//  @returns {number} Factorial of $value
//
@function factorial($value) {
  $result: 1;
  @if $value == 0 {
    @return $result;
  }
  @for $index from 1 through $value {
    $result: $result * $index;
  }
  @return $result;
}

//
//  Calculate Calculate factorial
//  @param {Function} $iterantee-func Function to be called for summation
//  @param {number} $input - Argument to $iterantee-func
//  @param {number} $initial - Starting number for iteration
//  @param {number} $limit - Ending number for iteration
//  @returns {number} Accumulated sum of interantee-func($input, <iteration-index>)
//
@function summation($iteratee-func, $input, $initial:0, $limit:100) {
  $sum: 0;
  @for $index from $initial to $limit {
    $sum: $sum + call($iteratee-func, $input, $index);
    // call(): sass introspection function
    // ref: http://sass-lang.com/documentation/Sass/Script/Functions.html#call-instance_method
  }
  @return $sum;
}

//
//  Internal function: Find n-th Maclaurin Expansion series item of exp(x)
//  @param {number} $x - Exponent
//  @param {number} $n - Taylor series limit count
//  @returns {number}
//
@function __exp-maclaurin($x, $n) {
  @return (pow($x, $n) / factorial($n));
}

//
//  Exponential
//  @param {number} $value - Exponent
//  @returns {number} e to the power of $value (e=2.718...)
//
@function exp($value) {
  @return summation(get-function('__exp-maclaurin'), $value, 0, 100);
}

//
//  Internal function: Find n-th Maclaurin Expansion series item of ln(x)
//  @param {number} $x - Exponent
//  @param {number} $n - Taylor series limit count
//  @returns {number}
//
@function __ln-maclaurin($x, $n) {
  @return (pow(-1, $n + 1) / $n) * (pow($x - 1, $n));
}

//
//  Natural log
//  @param {number} $value - Exponent
//  @returns {number}
//
@function ln($value) {
  $ten-exp: 1;
  $ln-ten: 2.30258509;
  @while ($value > pow(10, $ten-exp)) {
    $ten-exp: $ten-exp + 1;
  }
  @return summation(get-function('__ln-maclaurin'), $value / pow(10, $ten-exp), 1, 100) + $ten-exp * $ln-ten;
}


//
//  Square Root
//  @param {number} $r - Number to be square-rooted
//  @returns {number}
//
@function sqrt($r) {
  $x0: 1;
  $x1: $x0;
  @for $i from 1 through 10 {
    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
    $x0: $x1;
  }
  @return $x1;
}
