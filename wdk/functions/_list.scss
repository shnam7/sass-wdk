//=========================================================
//
//  @package Sass-WDK
//  @module functions/list
//
//  @description Sass List operations
//
//  @credit
//    http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
//
//=========================================================

//
//  Get first element of list
//  @param {List} $list - List
//  @returns {any} First element of $list
//
//  Examples:
//  $list: a, b, c, d, e, f;
//  $first: first($list); // a
//
@function list-first($list) {
  @return nth($list, 1);
}

//
//  Get last element of list
//  @param {List} $list - List
//  @returns {any} Last element of $list
//
//  Examples:
//  $list: a, b, c, d, e, f;
//  $last: last($list);   // f
//
@function list-last($list) {
  @return nth($list, length($list));
}

//
//  Find a value in list
//  @param {List} $list - List to be searched
//  @param {any} $value - Value to search
//  @returns {number} - Index of the value. null if value is not found
//
//  Examples:
//  $list: a, b, c, d z, e, a, f;
//  $first-index: index($list, a);     // 1
//  $last-index: last-index($list, a); // 6
//  $last-index: last-index($list, z); // null
//
@function list-last-index($list, $value) {
  $index: null;
  @for $i from 1 through length($list) {
    @if nth($list, $i) == $value {
      $index: $i;
    }
  }
  @return $index;
}

//
//  Prepend a value to list
//  @param {List} $list - List to be operated
//  @param {any} $value - Value to be prepended
//  @returns {List} Resulting list
//
//  Examples:
//  $list: b, c, d, e, f;
//  $new-list: prepend($list, a);               // a, b, c, d, e, f
//  $new-list: prepend($list, now i know my a); // now, i, know, my, a, b, c, d, e, f
//
@function list-prepend($list, $value) {
  @return join($value, $list);
}

//
//  Insert a value to list at n-th index position
//  @param {List} $list - List to be operated
//  @param {number} $index - Index position to insert (starts from 1)
//  @param {any} $value - Value to insert
//  @returns {List} - Resulting list
//
//  Examples:
//  $list: a, b, d, e, f;
//  I want to add "c" as the 3rd index in the list
//  $new-list: insert-nth($list, 3, c);   // a, b, c, d, e, f
//  $new-list: insert-nth($list, -1, z);  // error
//  $new-list: insert-nth($list, 0, z);   // error
//  $new-list: insert-nth($list, 100, z); // error
//  $new-list: insert-nth($list, zog, z); // error
//
@function list-insert-nth($list, $index, $value) {
  $result: null;
  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
  }
  @else if $index < 1 {
    @warn "List index 0 must be a non-zero integer for `insert-nth`";
  }
  @else if $index > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
  }
  @else {
    $result: ();
    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }
      $result: append($result, nth($list, $i));
    }
  }
  @return $result;
}

//
//  Remove element at n-th position
//  @param {List} $list - List to be operated
//  @param {number} $index - Index value to remove. If negative, count from the end
//  @returns {List} Resulting list
//
//  Examples:
//  $list: a, b, z, c, d, e, f;
//  $new-list: remove-nth($list,   3); // a, b, c, d, e, f
//  $new-list: remove-nth($list,   0); // error
//  $new-list: remove-nth($list,  -2); // a, b, z, c, d, f
//  $new-list: remove-nth($list, -10); // error
//  $new-list: remove-nth($list, 100); // error
//  $new-list: remove-nth($list, zog); // error
//
@function list-remove-nth($list, $index) {
  $result: null;
  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  }
  @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  }
  @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  }
  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);
    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }
  @return $result;
}

//
//  Replace element at n-th position
//  @param {List} $list - List to be operated
//  @param {number} $index - Index position. Counts from the end, if negative
//  @param {any} $value - New value to replace
//  @returns {List} Resulting list
//
//  Examples:
//  $list: a, b, z, d, e, f;
//  $new-list: replace-nth($list,   3, c); // a, b, c, d, e, f
//  $new-list: replace-nth($list,   0, c); // error
//  $new-list: replace-nth($list,  -2, c); // a, b, c, d, z, f
//  $new-list: replace-nth($list, -10, c); // error
//  $new-list: replace-nth($list, 100, c); // error
//  $new-list: replace-nth($list, zog, c); // error
//
@function list-replace-nth($list, $index, $value) {
  $result: null;
  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
  }
  @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `replace-nth`.";
  }
  @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
  }
  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);
    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }
      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }
  @return $result;
}

//
//  Replace values in list
//  @param {List} $list - List to be operated
//  @param {any} $old-value - Value to be replaced
//  @param {any} $new-value - Value to replace
//  @param {bool} [$recursive=false] - Recursive opion
//  @returns {List} Resulting list
//
//  $list: a, b, r, a, c a, d a, b, r, a;
//  $new-list: replace($list, a, u);       // u, b, r, u, c a, d a, b, r, u;
//  $new-list: replace($list, a, u, true); // u, b, r, u, c u, d u, b, r, u;
//
@function list-replace($list, $old-value, $new-value, $recursive:false) {
  $result: ();
  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive));
    }
    @else {
      @if nth($list, $i) == $old-value {
        $result: append($result, $new-value);
      }
      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }
  @return $result;
}

//
//  Remove matched value entry from list
//  @param {List} $list - List to be operated
//  @param {any} $value - Value to be searched and removed
//  @param {bool} [$recursive=false] - Recursive option
//  @returns {List} Resulting list
//
//  Examples:
//  $list: a, b z, c, z, d, z, e, f;
//  $new-list: remove($list, z);       // a, b z, c, d, e, f;
//  $new-list: remove($list, z, true); // a, b, c, d, e, f
//
@function list-remove($list, $value, $recursive:false) {
  $result: ();
  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    }
    @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }
  @return $result;
}

//
//  Slice list
//  @param {List} $list - List to be operated
//  @param {number} [$start=1] - Start index
//  @param {number} [$end=length($list)] - End index
//  @returns {List} Resulting list
//
//  Examples:
//  $list: a, b, c, d, e, f;
//  $new-list: slice($list, 3, 5);   // c, d, e
//  $new-list: slice($list, 4, 4);   // d
//  $new-list: slice($list, 5, 3);   // error
//  $new-list: slice($list, -1, 10); // error
//
@function list-slice($list, $start: 1, $end: length($list)) {
  $result: null;
  @if type-of($start) != number or type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  }
  @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  }
  @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  }
  @else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  }
  @else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  }
  @else {
    $result: ();
    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }
  @return $result;
}

//
//  Rearrange elements in reverse order
//  @param {List} $list - List to be operated
//  @param {bool} [$recursive=false] - Recursive option (deep dive if list entry is list)
//  @returns {List} Resulting list
//
//  Examples:
//  $list: a, b, c d e, f, g, h;
//  $new-list: reverse($list);       // h, g, f, c d e, b, a
//  $new-list: reverse($list, true); // h, g, f, e d c, b, a
//
@function list-reverse($list, $recursive: false) {
  $result: ();
  @if (length($list)==0) { @return $result; }
  @for $i from length($list)*-1 through -1 {
    @if type-of(nth($list, abs($i))) == list and $recursive {
      $result: append($result, reverse(nth($list, abs($i)), $recursive));
    }
    @else {
      $result: append($result, nth($list, abs($i)));
    }
  }
  @return $result;
}

//
//  Convert list into string combining all the entries
//  @param {List} $list - List to be operated
//  @param {string} $glue - String to be inserted between elements
//  @param {bool} [$unquote=true] - Unquote the resulting string
//  @returns {string} Resulting string
//
//  Examples:
//  $list: a, b, c d e, f, g, h;
//  $new-list: to-string($list);      // abcdefgh
//  $new-list: to-string($list, '-'); // a-b-c-d-e-f-g-h
//
@function list-to-string($list, $glue:''/*, $unquote:true*/) {
  $result: unquote('');
  @if (length($list) == 0 ) { @return $result; }

  @for $i from 1 through length($list) {
    $e: nth($list, $i);
    @if type-of($e) == list {
      $val: list-to-string($e, $glue/*, $unquote*/);
      $result: if(str-length($result)>0, $result#{$glue}#{$val}, $result#{$val});
    }
    @else {
      $result: if(str-length($result)>0, $result#{$glue}#{$e}, $result#{$e});
    }
  }
  @return $result;
  // @return if($unquote, unquote($result), $result);
}

//
//  Rotate the list
//  @param {List} $list - List to be rotated
//  @param {number} $count - Number of count to rotate. If positive, rotate to right, or left
//  @returns {List} Resulting list
//
//  Examples:
//  $list: a, b, c, d, e, f;
//  $new-list: loop($list, 1);  // f, a, b, c, d, e
//  $new-list: loop($list, -1); // b, c, d, e, f, a
//
@function list-rotate($list, $count:1) {
  $result: ();
  @for $i from 0 to length($list) {
    $result: append($result, nth($list, ($i - $count) % length($list) + 1));
  }
  @return $result;
}

//
//  Remove all the null values
//  @param {List} $list - List to be operated
//
@function list-trim($list) {
  @return remove($list, null, true);
}

//
//  Checks if a list contains a value(s).
//  @param {List} $list - List to be tested
//  @param {any...} $values - List of values to be searched
//  @returns {bool}
//
@function list-contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != "number" {
      @return false;
    }
  }
  @return true;
}
