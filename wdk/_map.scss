/**
 *
 *  @package sass-wdk
 *
 *  @module map
 *  @description Sass map operations
 *
 *  @credit:
 *    https://css-tricks.com/snippets/sass/deep-getset-maps
 *    http://www.sassmeister.com/gist/7525f0546479acd1d6e1
 *
 */

@forward "sass:map";

@use "sass:map";
@use "sass:list";

/**
 * Notes:
 * In map.set() and map.get() function, variables areguments are handled differently from other languages.
 * $key-list: (A B)
 * map.set($map, $key-list..., $val) != map.set($map, A, B, $val)
 * So, deep-set() and deep-get() function is added here to use key-list in a function call.
 * Refer to the test code example in ./test/test-map.scss
 */

/**
 *  Set value into multi-level nested map (deep-set).
 *  @param {map} $map - Map to be operated
 *  @param {list} $keys -  Key chain (list of key values.
 *  @param {any} $value - Value to set
 *  @returns {map} New map ipdated.
 */
@function deep-set($map, $keys, $value) {
    @if type-of($keys) != list { @return map.set($map, $keys, $value); }

    @return map.set($map, list.append($keys, $value)...);
}

/**
 *  Get value from multi-level nested map (deep-get).
 *  @param {map} $map - Map to be operated.
 *  @param {list} $keys - Key chain (list of key values)
 *  @returns {any} - Retrived value.
 */
@function deep-get($map, $keys) {
    @if type-of($keys) != list { @return map.get($map, $keys); }

    @return map.get($map, $keys...);
}

/**
 *  JQuery-style extend function
 *  Sass built-in function, map-merge() has following limitation:
 *    * Takes only 2 maps as arguments
 *    * Not recursive (No deep copy)
 *  This function supports
 *    * Unlimited number of maps to merge
 *    * Recursive (Deep copy) optionally if the last argument value is true
 *
 *  @param {map} $map - first map
 *  @param {list...} $maps - List of maps to be merged
 *  @param {bool} [$deep=false] - Enable recursive mode
 *  @returns {map} New map extended(merged)
 *
 *  Examples:
 *    extend-standard  : extend($map-1, $map-2, $map-3);  // shallow merge
 *    extend-recursive : extend($map-1, $map-2, $map-3, true);  // deep merge
 */
@function extend($map, $maps...) {
    $last: list.nth($maps, -1);
    $deep: $last==true;
    $max: if($deep, list.length($maps)-1, list.length($maps));
    $map: if($map==null, (), $map);

    @for $i from 1 through $max {
        $map: map.deep-merge($map, list.nth($maps, $i));
    }
    @return $map;
}

/**
 *  Remove null entries from map.
 *  @param {map} $map - Map to be operated
 *  @param {bool} [$recursive=false] - If true, trim child maps recursively
 *  @param {bool} [$trim-keys=true] - If true, removes all entries with null key
 *  @param {bool} [$trim-values=true] - If true, removes all entries with null value
 *  @returns {map} New map trimmed
 *
 *  Examples:
 *  $map: ('a':123, null:'null','b':('1':null,'2':2), 'c':null);
 *  map-trim($map) --> ("a": 123, null: "null", "b": ("1": null, "2": 2)) // 'c' key removed
 *  map-trim($map, true) --> ("a": 123, "b": ("1": null, "2": 2)) // null key removed
 *  map-trim($map, true);
 *  map-trim($map, true, true, true) --> ("a": 123, "b": ("2": 2))
 */
@function trim($map, $recursive:false, $trim-keys:true, $trim-values:true) {
    @if ($trim-keys) {
        $map: map.remove($map, null);
    }

    @each $key in map.keys($map) {
        $val: map.get($map, $key);

        // @debug 'map:' $key, map.get($map, $key);
        @if ($trim-values and $val==null) {
            $map: map.remove($map, $key);
        }
        @else if ($recursive and type-of($val)==map) {
            $new-val: trim($val, $recursive, $trim-keys, $trim-values);
            @if $new-val != null {
                $map: map.merge($map, ($key: $new-val));
            }
        }
    }
    @return $map;
}
