@use 'true' as *;
@use 'wdk/color';

@include describe('[color] module test') {
    @include test('color constant should be available') {
        @include assert-equal(color.$text-black, #444444);
        @include assert-equal(color.$text-black, #444);
    }

    @include it('yiq():calculate YIQ value.') {
        @include assert-equal(color.yiq(#444), 0.265625);
        @include assert-equal(color.yiq(#eee), 0.9296875);
    }
    @include it('yiq-color():choose black or white color which has higher constrast.') {
        @include assert-equal(color.yiq-color(color.gray(30%)), #eee);
        @include assert-equal(color.yiq-color(color.gray(61%)), #444);
        @include assert-equal(color.yiq-color(color.gray(90%)), #444);
    }
    @include it('tint():mix a color with whilte.') {
        @include assert-equal(color.tint(blue, 30%), rgb(76.5, 76.5, 255)); //#4d4dff
        @include assert-equal(color.tint(blue, 50%), rgb(127.5, 127.5, 255)); // #8080ff
        @include assert-equal(color.tint(blue, 70%), rgb(178.5, 178.5, 255)); //#b3b3ff
        // @include assert-equal(color.tint(blue, 30%), #4d4dff);
        // @include assert-equal(color.tint(blue, 50%), #8080ff);
        // @include assert-equal(color.tint(blue, 70%), #b3b3ff);
    }
    @include it('shade():mix a color with black.') {
        @include assert-equal(color.shade(blue, 30%), rgb(0, 0, 178.5)); // #0000b3
        @include assert-equal(color.shade(blue, 50%), rgb(0, 0, 127.5)); // navy
        @include assert-equal(color.shade(blue, 70%), rgb(0, 0, 76.5)); // #00004d
        // @include assert-equal(color.shade(blue, 30%), #0000b3);
        // @include assert-equal(color.shade(blue, 50%), navy);
        // @include assert-equal(color.shade(blue, 70%), #00004d);
    }
    @include it('gray():gray scale color.') {
        @include assert-equal(color.gray(30%), rgb(76.5, 76.5, 76.5)); // #4d4d4d
        @include assert-equal(color.gray(50%), rgb(127.5, 127.5, 127.5)); // gray
        @include assert-equal(color.gray(70%), rgb(178.5, 178.5, 178.5)); // #b3b3b3
        @include assert-equal(color.gray(70%, 0.5), rgba(178.5, 178.5, 178.5, 0.5)); // rgba(179, 179, 179, 0.5)
        // @include assert-equal(color.gray(30%), #4d4d4d);
        // @include assert-equal(color.gray(50%), gray);
        // @include assert-equal(color.gray(70%), #b3b3b3);
        // @include assert-equal(color.gray(70%, 0.5), rgba(179, 179, 179, 0.5));
    }
    @include it('smart-scale():scale a color to be lighter if it is light, or darker if it is dark.') {
        @include assert-equal(color.smart-scale(blue, 30%), rgb(0, 0, 178.5)); // #0000b3
        @include assert-equal(color.smart-scale(blue, 50%), rgb(0, 0, 127.5)); // navy
        @include assert-equal(color.smart-scale(blue, 70%), rgb(0, 0, 76.5)); // #00004d
        @include assert-equal(color.smart-scale(blue, 70%, 60%), rgb(178.5, 178.5, 255)); // #b3b3ff
        // @include assert-equal(color.smart-scale(blue, 30%), #0000b3);
        // @include assert-equal(color.smart-scale(blue, 50%), navy);
        // @include assert-equal(color.smart-scale(blue, 70%), #00004d);
        // @include assert-equal(color.smart-scale(blue, 70%, 60%), #b3b3ff);
    }
    @include it('gradient():make linear gradient with $color in the center of gradient.') {
        @include assert-equal(color.gradient(blue, 10%), linear-gradient(to bottom, rgb(12.75, 12.75, 255), rgb(0, 0, 242.25)));
        @include assert-equal(color.gradient(green, 10, top), linear-gradient(to top, rgb(12.75, 134.35, 12.75), rgb(0, 121.6, 0)));
        // @include assert-equal(color.gradient(blue, 10%), linear-gradient(to bottom, #0d0dff, #0000f2));
        // @include assert-equal(color.gradient(green, 10, top), linear-gradient(to top, #0d860d, #007a00));
    }
}
