@use 'true' as *;
@use 'wdk/reg';

@include describe('reg module test') {
    @include it('reg.set():store value to map variable with hierarchy.') {
        @include assert-equal(reg.set((), null, 123), ('': 123, ));
        @include assert-equal(reg.set((), 'A/B/C', 123), ("A": ("B": ("C": 123))));
        @include assert-equal(reg.set((), 'A:B:C', 123), ("A": ("B": ("C": 123))));
    }
    @include it('reg.get():get value from the registry database.') {
        $reg: ("A": ("B": ("C": 123)));
        @include assert-equal(reg.get($reg, 'A/B/C'), 123);
        @include assert-equal(reg.get($reg, 'A/B'), ("C": 123));
        @include assert-equal(reg.get($reg, '/'), null);
    }
    @include it('reg.merge():merge two registries at given $path.') {
        $reg: ("A": ("B": ("C": 123)));
        $reg2: ("NewC": ("D": ("E": 123)));
        @include assert-equal(reg.merge($reg, (C:456), 'A/B'), ("A": ("B": ("C": 456))));
        @include assert-equal(reg.merge($reg, (D:789), 'A/B'), ("A": ("B": ("C": 123, "D": 789))));
        @include assert-equal(reg.merge($reg, (C:123), 'A/B', $default:true), $reg);
    }

    @include it('reg.ssv(), reg.gsv(), reg.sys-registry(): global registry.') {
        $key: 'w-typography';

        @include reg.ssv($key, 'header/h1/font-size', 1rem, true);
        @include assert-equal(reg.gsv($key, 'header/h1/font-size'), 1rem);
        @include assert-equal(reg.sys-registry(), ("w-typography": ("header": ("h1": ("font-size": 1rem)))));

        @include reg.msv($key, 'header/h1', (a:1, b: (c: 3)));
        @include assert-equal(reg.sys-registry(), ("w-typography": ("header": ("h1": ("font-size": 1rem, a: 1, b: (c: 3))))));
    }
}
