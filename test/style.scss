//
//  sass-wdk test
//

// @use "wdk";
@use "wdk/color";
@use "wdk/math";
@use "wdk/string";
@use "wdk/list";
@use "wdk/map";
@use "wdk/reg";
@use "wdk/font";
@use "wdk/type";
@use "wdk/unit";
@use "wdk/ui";
@use "wdk/ui/svg";
@use "wdk/ui/media-query" as mq;
@use "wdk/ui/shape";
@use "wdk/ui/theme";


// @use "wdk/functions/math";

//--- Available test modules
$enable-color-test: true;
$enable-math-test: true;
$enable-string-test: true;
$enable-list-test: true;
$enable-map-test: true;
$enable-reg-test: true;
$enable-typography-test: true;
$enable-svg-test: true;
$enable-type-test: true;
$enable-unit-test: true;
$enable-align-test: true;
$enable-sys-reg-test: true;
$enable-breakpoint-test: true;
$enable-visibility-test: true;
$enable-shape-test: true;
$enable-theme-test: true;


//--- Test _color.scss
@if variable-exists(enable-color-test) and $enable-color-test {
    @debug "\a\a----- _color.scss Test -----\a";

    @debug color.$text-black;
    @debug color.gray(30);
    @debug color.gray(50);
    @debug color.blackness(#e1d7d2);
    @debug color.grayscale(#e1d7d2);

    .color-test {
        color: color.gray(30);
        background: gray(50);
    }
}

//--- Test _math.scss
@if variable-exists(enable-math-test) and $enable-math-test {
    @debug "\a\a----- _math.scss Test -----\a";

    .math-test {
        @debug math.pow(2, 0.5);
        @debug math.pow(10, 2);
        @debug math.pow(10, -2);
        @debug math.exp(3);
        @debug math.pow(math.$e, 3);
        @debug math.ln(2.71828);
        @debug math.factorial(5);
        @debug math.sqrt(2);
        @debug math.$e;
        @debug math.$pi;

        $val: 1px;
        @debug math.div($val, ($val*0 + 1)), type-of($val), math.is-unitless($val);
    }
}

//--- Test _string.scss
@if variable-exists(enable-string-test) and $enable-string-test {
    @debug "\a\a----- _string.scss Test -----\a";

    .string-test {
        $str: '{Var1}{Var2}Content{Var3}';
        $tokens: string.tokenize($str, '{', '}', true);

        @debug $str;
        @debug $tokens;
        @debug string.trim(" aa bb cc");
        @debug string.tokenize($str, '{', '}', );
        @debug string.tokenize($str, '{', '}', true);
        @debug list.nth($tokens, 1);
    }
}

//--- Test _list.scss
@if variable-exists(enable-list-test) and $enable-list-test {
    @debug "\a\a----- _list.scss Test -----\a";

    $list: a, b, c, d, e, f;
    @debug "List: #{$list}";
    $first: list.first($list);
    $last: list.last($list);

    @debug "First value=#{$first}";
    @debug "last value=#{$last}";


    $list: list.insert-at($list, 2, "second");
    @debug "Insert at #2: #{$list}";

    $list: list.remove-at($list, 3);
    @debug "Remove at #3: #{$list}";

    // $mylist:(a, b, (c,e));
    $color: (fg:red, bg:blue, aa:"aa");
    $mylist: (a, (quote("b"), c, map-values($color)), x);
    $str: list.to-string($mylist, '-');
    @debug $str;

    $list1: a, b, c, d, e, f;
    $list2: list.rotate($list1, 1);
    @debug $list2 list.nth($list2, 2);
    $list3: list.rotate($list1, -1);
    @debug $list3;

    @debug list.prepend((1 2 3), a);
}

//-- Test _map.scss
@if variable-exists(enable-map-test) and $enable-map-test {
    @debug "\a\a----- _map.scss Test -----\a";

    $box-color: (fg:darkgray, bg:white);
    $box: (name:"Default Box", color: $box-color);
    $custom-box: (name:"Custom Box", color: (fg:red), "trim-test": null);
    $box-merged: map.merge($box, $custom-box);
    $box-extended: map.extend($box, $custom-box, (color:(extra:red)), (color:(extra:blue)), true);
    $custom-box-trimed: map.trim($custom-box);
    @debug "box: #{inspect($box)}";
    @debug "custom-box: #{inspect($custom-box)}";
    @debug "box merged: #{inspect($box-merged)}";
    @debug "box extended: #{inspect($box-extended)}";
    @debug "custom-box trimed: #{inspect($custom-box-trimed)}";

    // trim test
    @debug "";
    @debug "Trim test -----";
    $map: ('a':123, null:null, 'b':('1':null, '2':2, null:123), 'c':null);
    @debug "Before trim #{inspect($map)}";
    @debug "Trim null keys not recursive' #{inspect(map.trim($map, false, true, false))}";
    @debug "Trim null keys recursive' #{inspect(map.trim($map, true, true, false))}";
    @debug "Trim null values not recursive' #{inspect(map.trim($map, false))}";
    @debug "Trim null values recursive' #{inspect(map.trim($map, true, false, true))}";
    @debug "Trim null keys and values not recursive' #{inspect(map.trim($map, false, true, true))}";
    @debug "Trim null keys and values recursive' #{inspect(map.trim($map, true, true, true))}";

    .map-test {
        content: map.get($box-merged, name);
        color: map.get(map-get($box-merged, color), fg);
        // background: reg.get($box-merged, "color/bg");
    }
}

//-- Test _reg.scss
@if variable-exists(enable-reg-test) and $enable-reg-test {
    @debug "\a\a----- _reg.scss Test -----\a";

    // $a: foo(());

    $reg: ();
    $reg: reg.set($reg, null, 123);
    @debug "(set null = 123)=> #{inspect($reg)}"; // --> ("A": ("B": ("C": 123)))
    @debug "(get null)=> #{inspect(reg.get($reg, ''))}"; // --> ("A": ("B": ("C": 123)))

    $reg: reg.set($reg, "/", 123);
    @debug "(set "/" = 123)=> #{inspect($reg)}"; // --> ("A": ("B": ("C": 123)))
    @debug "(get /)=> #{inspect(reg.get($reg, '/'))}"; // --> ("A": ("B": ("C": 123)))

    $reg: reg.set($reg, 'A/B/C', 123);
    @debug "(set A/B/C = 123)=> #{inspect($reg)}"; // --> ("A": ("B": ("C": 123)))

    $reg: reg.set($reg, 'A:B:C', 456);
    @debug "(set A:B:C = 456)=> #{inspect($reg)}"; // --> ("A": ("B": ("C": 456)))

    $reg: reg.set($reg, '/B/C', 789);
    @debug "(set /B/C = 789)=> #{inspect($reg)}"; // --> ("A": ("B": ("C": 456)), "": ("B": ("C": 789)))

    $reg: reg.set($reg, '//B/C', 111);
    @debug "(set //B/C = 111)=> #{inspect($reg)}"; // --> ("": ("": ("B": ("C": 111))))

    $reg: reg.set($reg, '///B/C', 222);
    @debug "(set ///B/C = 222)=> #{inspect($reg)}"; // --> ("": ("": ("B": ("C": 123))))

    $reg: reg.set($reg, 'box/color', (fg:green, bg:blue));
    @debug "(set box/color)=> #{inspect($reg)}";

    $reg: reg.merge($reg, (fg:red, bg:yellow));
    @debug "merge1 => #{inspect($reg)}";

    $reg: reg.merge((), (fg:red, bg:yellow));
    @debug "merge2 => #{inspect($reg)}";

    $reg: reg.merge((), (fg:red, bg:yellow), '/');
    @debug "merge3 => #{inspect($reg)}";

    $reg: reg.merge((), null);
    @debug "merge4 => #{inspect($reg)}";

    .reg-test {
        width: reg.get($reg, '//B/C/XXX', 123);
        height: reg.get($reg, '//B/C');
        color: reg.get($reg, 'box/color/fg');
        background: reg.get($reg, 'box/color/bg');
    }
}

//-- Test _typography.scss
@if variable-exists(enable-typography-test) and $enable-typography-test {
    @debug "\a\a----- _typography.scss Test -----";

    @for $i from -5 through 5 {
        @debug unquote("font-scale(#{$i})=") font.scale($i);
    }

    @debug unquote("$w-text-xxs=    ") font.$size-xxs;
    @debug unquote("$w-text-xs=     ") font.$size-xs;
    @debug unquote("$w-text-sm=     ") font.$size-sm;
    @debug unquote("$w-text-md=     ") font.$size-md;
    @debug unquote("$w-text-lg=     ") font.$size-lg;
    @debug unquote("$w-text-xl=     ") font.$size-xl;
    @debug unquote("$w-text-xxl=    ") font.$size-xxl;
    @debug unquote("$w-text-xxxl=   ") font.$size-xxxl;

    @debug "spacing -----";
    @for $i from -5 through 5 {
        @debug "spacing #{$i}=" font.spacing($i);
    }
}

//-- Test _svg.scss
@if variable-exists(enable-svg-test) and $enable-svg-test {
    @debug "\a\a----- _svg.scss Test -----\a";

    .svg-test {
        $svg-cartman: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 300"><path fill="#804D35" d="M35 254.6l9.7 28.8 211 1.7 12-34L35 255"/><path fill="#2F2B33" d="M40 288c1.3 1.2 221 0 221 0s5.3-6.4-50.2-10c-34.4.8-55.7 6-55.7 6s-25-6-47-6c-91 4-69 8.8-68 10z"/><path fill="#EE304E" d="M15.2 187.8s20.3-30 36.2-35.4c3.6 1.2 189 1.5 198.3 1.2 26.8 5.8 23.5 24 31.6 26.4 1.8-.3 11 79.6-19.8 77.6-1.3 2.5-50.6 4-55.7 4.5s-21.4 10-43 13c-4.6 1-78.7 0-78.7 0s-34-4-55-26c-1-2 0-9-13-60z"/><ellipse cx="151.3" cy="128.9" fill="#FFEDC3" rx="109.8" ry="76.8"/><path fill="#00B8C3" d="M43 114.6c0-49 58-81 107-82 82.7-2 106.5 68.2 105.3 67.6C133.3 44.7 43 114.6 43 114.6z"/><path fill="#FCEE21" d="M44.3 117.7c43.7-26 94-35.7 144.5-30.4 16 1.7 32 5 47.6 9.8 4.5 2 9 3 13.4 5l3.5 2c-1 0 .3 0 .6 1 4 2 8-4.2 3-6.2-22-10-46-14.6-69-17-51-6.5-103 4.5-148 31-4 2.3-1 9 4 6.3zm72.4-84.4s9-4.8 10.4-3.8 2-2.3 2-2.3l9-2h11l1-2.3s12-1 13 2c0 4 15.7 4 15 10-2.5 8-12 2-13 4-11.4 6-17 0-17 0l-13 4-1-7s-3 5-8 5.3c-17.3 4-9-8.5-9-8.5zm-100.5 155C6 189.3-7 221 24 227.3c10.4-2.6 40 2 36-13s-33.8-24.2-44-26zm267.4-7s5-1 8 4 4.7 22.2 4 27.6-.6 10-13.8 11-18.8-9-19.8-8-14.2 1-14.2 1-7.4-7 1.3-12c4-3 4-8 4-8s5-12 9-14 22-2 22-2z"/><path fill="none" stroke="#000" stroke-miterlimit="10" d="M68 167.3c11 12 91 71 170.3-5.6m-73 45.6c2 36.4-1.3 65.6-1.3 65.6"/><ellipse cx="157.1" cy="213.4" rx="1" ry="3"/><ellipse cx="159.7" cy="238.7" rx="1.2" ry="3.3"/><ellipse cx="157.2" cy="262.7" rx="2" ry="3.4"/><path fill="none" stroke="#000" stroke-miterlimit="10" d="M139 188.5c15.7 5.5 38 0 38 0"/><ellipse cx="182.5" cy="119.1" fill="#FFF" transform="matrix(.81 -.587 .587 .81 -35.153 129.678)" rx="26.7" ry="30.5"/><ellipse cx="126.5" cy="119.1" fill="#FFF" transform="matrix(.884 .467 -.467 .884 70.21 -45.287)" rx="26.7" ry="30.5"/><circle cx="138.6" cy="117.9" r="3.3"/><circle cx="170.6" cy="117.9" r="3.3"/><path d="M134.7 172.4c3.4-3.5 7.7-3.2 7.7-3.2s24.2-.2 25.5.3 2 3 2 4.2c-1 1.4-5 10.7-7 13.3-2 1.8-9 0-9 0s-4-1-5-1.8c-.7-.3-3.4 0-4-.2s-11.5-10.6-12-12.3"/><path fill="#FFF" d="M149 172.3c-.2-1-1-1.7-1.8-1.5l-3 .5c-.8 0-1.3 1-1.2 2 .2 1 1 1.7 1.8 1.5l3-.5c1 0 1.4-1 1.2-2zm9 1.5c.2-.8-.3-1.6-1-1.8l-4.2-.8c-.7 0-1.5.4-1.6 1.2v.3c-.3.8.2 1.6 1 1.8l4 .8c.8 0 1.6-.4 1.7-1.2zm9-.4c0-1-.8-1.7-1.6-1.6l-5 .4c-.8 0-1.4 1-1.3 1.8 1 1 1 1.7 2 1.6l5-.4c1 0 2-1 2-1.8z"/></svg>';
        background: svg.svg-url($svg-cartman);
        @debug Check CSS output;
        // @debug svg.svg-url($svg-cartman);
    }
}

//-- Test _type.scss
@if variable-exists(enable-type-test) and $enable-type-test {
    @debug "\a\a----- _type.scss Test -----\a";

    .type-test {
        $my-color: (fg:red, bg:blue);
        @debug type.to-string($my-color);

        content: quote(type.to-string($my-color));
    }
}

//-- Test _unit.scss
@if variable-exists(enable-unit-test) and $enable-unit-test {
    @debug "\a\a----- _unit.scss Test -----\a";

    .unit-test {
        $border-width: 14px 10px 5px 5px;
        @debug unit.rem($border-width);  // convert px to rem
        border: unit.rem($border-width) solid red;
    }
}

//-- Test _align.scss
@if variable-exists(enable-align-test) and $enable-align-test {
    @debug "\a\a----- _align.scss Test -----\a";
    .align-test {
        background: blue;
        height: 100px;
        width: 50%;
        @include ui.align-middle;
        @include ui.truncate-text(2);
    }
}

//-- Test _sys-reg.scss
@if variable-exists(enable-sys-reg-test) and $enable-sys-reg-test {
    @debug "\a\a----- _sys-reg.scss Test -----\a";

    .sys-reg-test {
        $my-breakpoints: (seg1:0, seg2: 500px, sec3: 1000px);
        @include reg.ssv('media', 'my-bp', $my-breakpoints);
        @debug reg.gsv('media', 'my-bp');
        @debug reg.gsv('media');

        @include reg.msv('media', 'my-bp', (seg2:600pc, seg4:1500px));
        @debug reg.gsv('media', 'my-bp');
    }

    @debug reg.sys-registry();
}

//-- Test _breakpoint.scss
@if variable-exists(enable-breakpoint-test) and $enable-breakpoint-test {
    @debug "\a\a----- _breakpoint.scss Test -----\a";

    .breakpoint-test {
        // change breakpoints
        $my-breakpoints: (seg1:0, seg2: 500px, seg3: 1000px);
        @include mq.set-breakpoints($my-breakpoints);
        @debug mq.query-names();

        @include mq.media(seg2-only, screen) {
            width: 100px;
        }

        @include mq.media(seg1, print) {
            width: 50px;
        }

        @include mq.media(seg3) {
            width: 500px;
        }

        // restore breakpoints to default
        @include mq.set-breakpoints();
        @debug mq.query-names();
    }
}

//-- Test _visibility.scss
@if variable-exists(enable-visibility-test) and $enable-visibility-test {
    @debug "\a\a----- _visibility.scss Test -----\a";
    @debug Check CSS output;

    @include ui.generate-visibility-classes((show, hide), (medium, large-only), 'table');
}

//-- Test _shape.scss
@if variable-exists(enable-shape-test) and $enable-shape-test {
    @debug "\a\a----- _shape.scss Test -----\a";
    @debug Check CSS output;

    .triangle {
        @include shape.triangle(1rem, rebeccapurple, up);
    }

    .hamburger {
        @include shape.hamburger();
    }

    .circle {
        @include shape.circle(2rem);
    }

    .pattern {
        @include shape.pattern(2rem);
    }
}

//-- Test _theme.scss
@if variable-exists(enable-theme-test) and $enable-theme-test {
    @debug "\a\a----- _theme.scss Test -----\a";

    @debug 'default' reg.gsv('theme');

    @include theme.select(purple);
    @debug 'purple:' reg.gsv('theme');

    @include theme.select(teal);
    @debug 'teal:' reg.gsv('theme');
}
